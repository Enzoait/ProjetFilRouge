name: Deploy with terraform

on: push

permissions:
  id-token: write
  contents: read

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: eu-west-1

      - name: Build Frontend Docker image
        run: docker build -t enzoait/projetfilrouge-frontend:${{ github.sha }} ../frontend

      - name: Build Backend Docker image
        run: docker build -t enzoait/projetfilrouge-backend:${{ github.sha }} ../backend

      - name: Login to ECR
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 304230205768.dkr.ecr.eu-west-1.amazonaws.com

      - name: Tag & Push Frontend
        run: |
          docker tag enzoait/projetfilrouge-frontend:${{ github.sha }} 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-frontend:${{ github.sha }}
          docker push 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-frontend:${{ github.sha }}

      - name: Tag & Push Backend
        run: |
          docker tag enzoait/projetfilrouge-backend:${{ github.sha }} 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-backend:${{ github.sha }}
          docker push 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-backend:${{ github.sha }}

      - name: Tag & Push Backend Lambda function
        run: |
          aws lambda update-function-code --function-name LambdaFunctionOverHttps --zip-file fileb://../infra/lambda/lambda_function.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Import existing resources
        run: |
          API_ID="${{ secrets.API_GATEWAY_ID }}"
          RESOURCE_ID="${{ secrets.RESOURCE_ID }}"

          # Récupération des resource IDs pour /todos et /todos/{id}
          TODOS_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id "$API_ID" | jq -r '.items[] | select(.path=="/todos") | .id')
          TODOS_ID_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id "$API_ID" | jq -r '.items[] | select(.path=="/todos/{id}") | .id')

          declare -A methods_resources=(
            ["post"]="todos"
            ["get"]="todos"
            ["put"]="todos_id"
            ["delete"]="todos_id"
            ["options"]="todos"
          )

          for method in POST GET PUT DELETE OPTIONS; do
            lower_method=$(echo "$method" | tr '[:upper:]' '[:lower:]')
            resource_key=${methods_resources[$lower_method]}

            if [ "$resource_key" = "todos" ]; then
              resource_id=$TODOS_RESOURCE_ID
              lname="${lower_method}_todos"
              method_response_suffix="_response_200"
              if [ "$method" = "OPTIONS" ]; then
                lname="options_todos"
              fi
            elif [ "$resource_key" = "todos_id" ]; then
              resource_id=$TODOS_ID_RESOURCE_ID
              lname="${lower_method}_todos_id"
              method_response_suffix="_response_200"
              if [ "$method" = "OPTIONS" ]; then
                lname="options_todos_id"
              fi
            else
              echo "Unknown resource key for method $method"
              continue
            fi

            # Vérifie si la méthode existe dans API Gateway pour cette resource
            if aws apigateway get-method --rest-api-id "$API_ID" --resource-id "$resource_id" --http-method "$method" > /dev/null 2>&1; then

              # Import de la ressource aws_api_gateway_method
              if ! terraform state list | grep -q "^aws_api_gateway_method.${lname}$"; then
                terraform import aws_api_gateway_method.${lname} ${API_ID}/${resource_id}/${method}
              fi

              # Import de l'intégration si elle existe
              if aws apigateway get-integration --rest-api-id "$API_ID" --resource-id "$resource_id" --http-method "$method" > /dev/null 2>&1; then
                if ! terraform state list | grep -q "^aws_api_gateway_integration.${lname}$"; then
                  terraform import aws_api_gateway_integration.${lname} ${API_ID}/${resource_id}/${method}
                fi
              else
                echo "No integration found for $method $resource_key — skipping import aws_api_gateway_integration.${lname}"
              fi

              # Import des method response et integration response
              if [ "$method" = "OPTIONS" ]; then
                # OPTIONS a un nom particulier
                if aws apigateway get-method-response --rest-api-id "$API_ID" --resource-id "$resource_id" --http-method OPTIONS --status-code 200 > /dev/null 2>&1; then
                  if ! terraform state list | grep -q "^aws_api_gateway_method_response.${lname}$"; then
                    terraform import aws_api_gateway_method_response.${lname} ${API_ID}/${resource_id}/OPTIONS/200
                  fi
                fi

                if aws apigateway get-integration-response --rest-api-id "$API_ID" --resource-id "$resource_id" --http-method OPTIONS --status-code 200 > /dev/null 2>&1; then
                  if ! terraform state list | grep -q "^aws_api_gateway_integration_response.${lname}$"; then
                    terraform import aws_api_gateway_integration_response.${lname} ${API_ID}/${resource_id}/OPTIONS/200
                  fi
                fi
              else
                # Méthodes GET, POST, PUT, DELETE
                mr_name="${lname}"

                if aws apigateway get-method-response --rest-api-id "$API_ID" --resource-id "$resource_id" --http-method "$method" --status-code 200 > /dev/null 2>&1; then
                  if ! terraform state list | grep -q "^aws_api_gateway_method_response.${mr_name}$"; then
                    terraform import aws_api_gateway_method_response.${mr_name} ${API_ID}/${resource_id}/${method}/200
                  fi
                fi

                if aws apigateway get-integration-response --rest-api-id "$API_ID" --resource-id "$resource_id" --http-method "$method" --status-code 200 > /dev/null 2>&1; then
                  if ! terraform state list | grep -q "^aws_api_gateway_integration_response.${lname}$"; then
                    terraform import aws_api_gateway_integration_response.${lname} ${API_ID}/${resource_id}/${method}/200
                  fi
                fi
              fi

            else
              echo "Méthode $method non trouvée dans l'API Gateway resource $resource_key, skipping imports."
            fi

          done


          # --- ECR FRONTEND ---
          if aws ecr describe-repositories --repository-names projetfilrouge-frontend > /dev/null 2>&1; then
            if ! terraform state list | grep -q '^aws_ecr_repository.frontend$'; then
              terraform import aws_ecr_repository.frontend projetfilrouge-frontend
            fi
          fi

          # --- ECR BACKEND ---
          if aws ecr describe-repositories --repository-names projetfilrouge-backend > /dev/null 2>&1; then
            if ! terraform state list | grep -q '^aws_ecr_repository.backend$'; then
              terraform import aws_ecr_repository.backend projetfilrouge-backend
            fi
          fi

          # --- S3 BUCKET ---
          if aws s3api head-bucket --bucket iimtib62673 2>/dev/null; then
            if ! terraform state list | grep -q '^aws_s3_bucket.main$'; then
              terraform import aws_s3_bucket.main iimtib62673
            fi
          fi

          # --- LAMBDA FUNCTION ---
          if aws lambda get-function --function-name LambdaFunctionOverHttps > /dev/null 2>&1; then
            if ! terraform state list | grep -q '^aws_lambda_function.lambda_function_over_https$'; then
              terraform import aws_lambda_function.lambda_function_over_https LambdaFunctionOverHttps
            fi
          fi

          # # --- LAMBDA PERMISSION ---
          # # On suppose que la Lambda existe déjà (vérifiée juste au-dessus)
          # if ! terraform state list | grep -q '^aws_lambda_permission.apigw_lambda$'; then
          #   terraform import aws_lambda_permission.apigw_lambda LambdaFunctionOverHttps/AllowExecutionFromAPIGateway
          # fi

          # --- API GATEWAY REST API ---
          if aws apigateway get-rest-api --rest-api-id $API_ID > /dev/null 2>&1; then
            if ! terraform state list | grep -q '^aws_api_gateway_rest_api.dynamo_db_operations$'; then
              terraform import aws_api_gateway_rest_api.dynamo_db_operations $API_ID
            fi
          fi

          # --- API GATEWAY RESOURCE ---
          if aws apigateway get-resource --rest-api-id $API_ID --resource-id $RESOURCE_ID > /dev/null 2>&1; then
            if ! terraform state list | grep -q '^aws_api_gateway_resource.todos$'; then
              terraform import aws_api_gateway_resource.todos ${API_ID}/${RESOURCE_ID}
            fi
          fi

          # --- API GATEWAY RESOURCE ---
          if aws apigateway get-resource --rest-api-id $API_ID --resource-id $RESOURCE_ID > /dev/null 2>&1; then
            if ! terraform state list | grep -q '^aws_api_gateway_resource.todos_id$'; then
              terraform import aws_api_gateway_resource.todos_id ${API_ID}/${RESOURCE_ID_FOR_TODOID}
            fi
          fi

          # Vérifier si la policy existe puis importer si pas déjà dans le state terraform
          POLICY_ARN="arn:aws:iam::${{ secrets.AWS_ACC_ID }}:policy/lambda-cloudwatch-logs"

          if aws iam get-policy --policy-arn "$POLICY_ARN" > /dev/null 2>&1; then
            if ! terraform state list | grep -q '^aws_iam_policy.lambda_cloudwatch_logs$'; then
              terraform import aws_iam_policy.lambda_cloudwatch_logs $POLICY_ARN
            fi
          fi

          LOG_GROUP_NAME="/aws/lambda/LambdaFunctionOverHttps"
          if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP_NAME" | grep -q "$LOG_GROUP_NAME"; then
            if ! terraform state list | grep -q '^aws_cloudwatch_log_group.lambda$'; then
              terraform import aws_cloudwatch_log_group.lambda "$LOG_GROUP_NAME"
            fi
          fi


      - name: Import existing OAC
        run: |
          terraform import aws_cloudfront_origin_access_control.s3_oac ${{ secrets.AWS_OAC_ID }}

      - name: Terraform Apply
        run: |
          terraform fmt
          terraform apply --auto-approve

      # - name: Terraform Destroy
      #   run: terraform destroy --auto-approve
