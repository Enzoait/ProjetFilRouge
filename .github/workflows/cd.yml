name: Deploy with terraform

on: push

permissions:
  id-token: write
  contents: read

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: eu-west-1

      - name: Build Frontend Docker image
        run: docker build -t enzoait/projetfilrouge-frontend:${{ github.sha }} ../frontend

      - name: Build Backend Docker image
        run: docker build -t enzoait/projetfilrouge-backend:${{ github.sha }} ../backend

      - name: Login to ECR
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 304230205768.dkr.ecr.eu-west-1.amazonaws.com

      - name: Tag & Push Frontend
        run: |
          docker tag enzoait/projetfilrouge-frontend:${{ github.sha }} 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-frontend:${{ github.sha }}
          docker push 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-frontend:${{ github.sha }}

      - name: Tag & Push Backend
        run: |
          docker tag enzoait/projetfilrouge-backend:${{ github.sha }} 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-backend:${{ github.sha }}
          docker push 304230205768.dkr.ecr.eu-west-1.amazonaws.com/projetfilrouge-backend:${{ github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Import existing resources
        run: |
          API_ID="${{ secrets.API_GATEWAY_ID }}"
          RESOURCE_ID="rpyj5i"
          STAGE_NAME="dev"

          # Import ECR frontend if not already in state
          if ! terraform state list | grep -q 'aws_ecr_repository.frontend'; then
            terraform import aws_ecr_repository.frontend projetfilrouge-frontend
          fi

          # Import ECR backend if not already in state
          if ! terraform state list | grep -q 'aws_ecr_repository.backend'; then
            terraform import aws_ecr_repository.backend projetfilrouge-backend
          fi

          # Import S3 bucket if not already in state
          if ! terraform state list | grep -q 'aws_s3_bucket.main'; then
            terraform import aws_s3_bucket.main iimtib62673
          fi

          # Import Lambda function if absent
          if ! terraform state list | grep -q 'aws_lambda_function.lambda_function_over_https'; then
            terraform import aws_lambda_function.lambda_function_over_https LambdaFunctionOverHttps
          fi

          # Import Lambda permission if absent
          if ! terraform state list | grep -q 'aws_lambda_permission.apigw_lambda'; then
            terraform import aws_lambda_permission.apigw_lambda LambdaFunctionOverHttps/AllowExecutionFromAPIGateway
          fi

          # Import API Gateway REST API
          if ! terraform state list | grep -q 'aws_api_gateway_rest_api.dynamo_db_operations'; then
            terraform import aws_api_gateway_rest_api.dynamo_db_operations $API_ID
          fi

          # Import API Gateway Stage
          if ! terraform state list | grep -q 'aws_api_gateway_stage.dynamodb_manager'; then
            if aws apigateway get-stage --rest-api-id $API_ID --stage-name $STAGE_NAME > /dev/null 2>&1; then
              terraform import aws_api_gateway_stage.dynamodb_manager $API_ID/$STAGE_NAME
            else
              echo "Stage API Gateway $STAGE_NAME does not exist, skipping import."
            fi
          fi

          # Import API Gateway Resource
          if ! terraform state list | grep -q '^aws_api_gateway_resource.dynamodb_manager$'; then
            terraform import aws_api_gateway_resource.dynamodb_manager ${API_ID}/${RESOURCE_ID}
          fi

          # Methods list including OPTIONS
          methods=("POST" "GET" "PUT" "DELETE" "OPTIONS")

          for method in "${methods[@]}"; do
            lname="${method,,}_method"  # ex: post_method, option_method

            # Import aws_api_gateway_method
            if ! terraform state list | grep -q "^aws_api_gateway_method.${lname}$"; then
              terraform import aws_api_gateway_method.${lname} ${API_ID}/${RESOURCE_ID}/${method}
            fi

            # Import aws_api_gateway_integration (no _integration suffix, just _method)
            if ! terraform state list | grep -q "^aws_api_gateway_integration.${lname}$"; then
              terraform import aws_api_gateway_integration.${lname} ${API_ID}/${RESOURCE_ID}/${method}
            fi

            # Import aws_api_gateway_method_response
            method_response_name="${lname}_response_200"  # ex: post_method_response_200 or get_response_200
            # Note : dans ta config OPTIONS a simplement "options", pas "option_method_response"
            if [ "$method" = "OPTIONS" ]; then
              # OPTIONS method_response resource name is "options"
              if ! terraform state list | grep -q "^aws_api_gateway_method_response.options$"; then
                terraform import aws_api_gateway_method_response.options ${API_ID}/${RESOURCE_ID}/${method}/200
              fi
            else
              if ! terraform state list | grep -q "^aws_api_gateway_method_response.${method_response_name}$"; then
                terraform import aws_api_gateway_method_response.${method_response_name} ${API_ID}/${RESOURCE_ID}/${method}/200
              fi
            fi

            # Import aws_api_gateway_integration_response
            integration_response_name="${lname}"  # dans ta config integration_response a même nom que integration
            # mais suffixé, ex: post_method, get_method etc.
            if [ "$method" = "OPTIONS" ]; then
              if ! terraform state list | grep -q "^aws_api_gateway_integration_response.options$"; then
                terraform import aws_api_gateway_integration_response.options ${API_ID}/${RESOURCE_ID}/${method}/200
              fi
            else
              if ! terraform state list | grep -q "^aws_api_gateway_integration_response.${integration_response_name}$"; then
                terraform import aws_api_gateway_integration_response.${integration_response_name} ${API_ID}/${RESOURCE_ID}/${method}/200
              fi
            fi
          done

      - name: Import existing OAC
        run: |
          terraform import aws_cloudfront_origin_access_control.s3_oac ${{ secrets.AWS_OAC_ID }}

      - name: Terraform Apply
        run: |
          terraform fmt
          terraform apply --auto-approve

      # - name: Terraform Destroy
      #   run: terraform destroy --auto-approve
