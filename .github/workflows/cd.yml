name: Deploy with terraform

on: push

permissions:
  id-token: write # Permission to write an ID token
  contents: read # Permission to read contents

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest # Use an Ubuntu runner for this job
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout # Step to check out the code from the repository
        uses: actions/checkout@v4 # Specifies the action to use and version
      - name: Configure AWS credentials # Step to configure AWS credentials for AWS operations
        uses: aws-actions/configure-aws-credentials@v4 # specifies the action to use and version
        with:
          audience: sts.amazonaws.com # The audience for the AWS credentials
          role-to-assume: ${{secrets.AWS_IAM_ROLE}} # The AWS role ARN to assume from secrets
          aws-region: eu-west-1 # The AWS region for operations

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: deploy terraform # Step to deploy using a custom script
        run: |
          terraform fmt
          terraform init
          |
          # Import ECR frontend if not already in state
          if ! terraform state list | grep -q 'aws_ecr_repository.frontend'; then
            terraform import aws_ecr_repository.frontend projetfilrouge-frontend
          fi

          # Import ECR backend if not already in state
          if ! terraform state list | grep -q 'aws_ecr_repository.backend'; then
            terraform import aws_ecr_repository.backend projetfilrouge-backend
          fi

          # Import S3 bucket if not already in state
          if ! terraform state list | grep -q 'aws_s3_bucket.example'; then
            terraform import aws_s3_bucket.example iimtib62673
          fi
          terraform apply --auto-approve=true
      - name: destroy terraform # Step to deploy using a custom script
        run: |
          terraform destroy --auto-approve=true
